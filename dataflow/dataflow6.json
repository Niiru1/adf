{
	"name": "dataflow6",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Attributions_Raw_Csv",
						"type": "DatasetReference"
					},
					"name": "AttributionsRaw"
				},
				{
					"dataset": {
						"referenceName": "Locations",
						"type": "DatasetReference"
					},
					"name": "LocationsErrors"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "outputFolder",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "FilterEmptyRows"
				},
				{
					"name": "select1"
				},
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "filter1"
				},
				{
					"name": "aggregate2"
				},
				{
					"name": "filter66433"
				},
				{
					"name": "filter40024"
				}
			],
			"scriptLines": [
				"source(output(",
				"          {Incident Category Group} as string,",
				"          {Incident Category Group Description} as string,",
				"          {Responsible Organisation Full Name} as string,",
				"          {Responsible Type} as string,",
				"          Route as string,",
				"          {Route Name} as string,",
				"          Area as string,",
				"          {Area Abbrev} as string,",
				"          {Area Name} as string,",
				"          {Area Role Abbrev} as string,",
				"          {Area Role Name} as string,",
				"          {Incident Number} as string,",
				"          {Incident Create Date} as string,",
				"          {Incident Description} as string,",
				"          {Incident Type} as string,",
				"          {Incident Start Datetime} as string,",
				"          {Incident End Datetime} as string,",
				"          {Incident Close Datetime} as string,",
				"          {Incident Duration} as string,",
				"          {Incident Status} as string,",
				"          {Incident New Flag} as string,",
				"          {Section Start Code} as string,",
				"          {Section End Code} as string,",
				"          {Attribution Area Code} as string,",
				"          {Attribution Area Description} as string,",
				"          {Incident Reason Type Name} as string,",
				"          {Incident Category} as string,",
				"          {Incident Category Description} as string,",
				"          {Incident Reason} as string,",
				"          {Incident Reason Name} as string,",
				"          {Incident Reason Description} as string,",
				"          {Performance Event Group} as string,",
				"          {Performance Event Code} as string,",
				"          {Performance Event Name} as string,",
				"          {Start Stanox} as string,",
				"          {End Stanox} as string,",
				"          {Operator - Resp} as string,",
				"          {Operator Type - Resp} as string,",
				"          {Operator Franchised - Resp} as string,",
				"          {Operator Holding Company - Resp} as string,",
				"          {Operator Name - Resp} as string,",
				"          {Operator Full Name - Resp} as string,",
				"          {Service Group Type - Resp} as string,",
				"          {Service Group Code - Resp} as string,",
				"          {Service Group Description - Resp} as string,",
				"          {TSC - Resp} as string,",
				"          {TSC Description - Resp} as string,",
				"          {TSC PfPI Flag - Resp} as string,",
				"          {Headcode - Resp} as string,",
				"          {Train ID - Resp} as string,",
				"          {Punctuality Threshold - Resp} as string,",
				"          {Train Service Perf Value - Resp} as string,",
				"          {Train Class Code - Resp} as string,",
				"          {Train Class Description - Resp} as string,",
				"          {Train Class PfPI Flag - Resp} as string,",
				"          {Planned Dest Location Code - Resp} as string,",
				"          {Planned Origin Location Code - Resp} as string,",
				"          {Planned Origin WTT Datetime - Resp} as string,",
				"          {Planned Dest GBTT Datetime - Resp} as string,",
				"          {Operator Holding Company - Affected} as string,",
				"          {Operator Type - Affected} as string,",
				"          {Operator - Affected} as string,",
				"          {Operator Name - Affected} as string,",
				"          {Operator Full Name - Affected} as string,",
				"          {Operator Franchised - Affected} as string,",
				"          {Service Group Code - Affected} as string,",
				"          {Service Group Description - Affected} as string,",
				"          {Service Group Type - Affected} as string,",
				"          {Punctuality Threshold - Affected} as string,",
				"          {TSC - Affected} as string,",
				"          {TSC Description - Affected} as string,",
				"          {TSC PfPI Flag - Affected} as string,",
				"          {Train ID - Affected} as string,",
				"          {Train Class Code - Affected} as string,",
				"          {Train Class Description - Affected} as string,",
				"          {Train Class PfPI Flag - Affected} as string,",
				"          {Headcode - Affected} as string,",
				"          {Planned Dest Actual Datetime - Affected} as string,",
				"          {Planned Dest GBTT Datetime - Affected} as string,",
				"          {Planned Dest Location Code - Affected} as string,",
				"          {Planned Dest WTT Datetime - Affected} as string,",
				"          {Planned Origin Location Code - Affected} as string,",
				"          {Planned Origin Actual Datetime - Affected} as string,",
				"          {Planned Origin WTT Datetime - Affected} as string,",
				"          {Operator Type - React} as string,",
				"          {Operator Franchised - React} as string,",
				"          {Operator - React} as string,",
				"          {Operator Holding Company - React} as string,",
				"          {Operator Name - React} as string,",
				"          {Operator Full Name - React} as string,",
				"          {Train Class Code - React} as string,",
				"          {Train Class Description - React} as string,",
				"          {Train Class PfPI Flag - React} as string,",
				"          {TSC - React} as string,",
				"          {TSC Description - React} as string,",
				"          {TSC PfPI Flag - React} as string,",
				"          {Service Group Type - React} as string,",
				"          {Service Group Code - React} as string,",
				"          {Service Group Description - React} as string,",
				"          {Headcode - React} as string,",
				"          {Train ID - React} as string,",
				"          {Punctuality Threshold - React} as string,",
				"          {Reactionary Category Super Group Name} as string,",
				"          {Reactionary Category Group Description} as string,",
				"          {Reactionary Category Code} as string,",
				"          {Reactionary Category Description} as string,",
				"          {Reactionary Reason Code} as string,",
				"          {Reactionary Reason Name} as string,",
				"          {Reactionary Reason Description} as string,",
				"          {PfPI Minutes} as string,",
				"          {PfPI Costs} as string,",
				"          {Attributed Minutes} as string,",
				"          {Attributed Cost} as string,",
				"          {Event Datetime} as string,",
				"          {Financial Year} as string,",
				"          {Financial Period Number} as string,",
				"          {Planned Origin WTT Datetime - React} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> AttributionsRaw",
				"source(output(",
				"          {Planned Dest Location Code - Affected} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LocationsErrors",
				"AttributionsRaw filter(!isNull({Event Datetime})) ~> FilterEmptyRows",
				"FilterEmptyRows select(mapColumn(",
				"          each(match(/* All input columns */ true()),",
				"               /* Input name */ $$ = $$),",
				"          Code = Area,",
				"          Abbreviation = {Area Abbrev},",
				"          Name = {Area Name}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1, LocationsErrors join(fuzzyCompare(select1@{Planned Dest Location Code - Affected}, LocationsErrors@{Planned Dest Location Code - Affected}, 80.00),",
				"     joinType:'inner',",
				"     matchType:'fuzzy',",
				"     ignoreSpaces: false,",
				"     broadcast: 'off')~> join1",
				"join1 aggregate(groupBy({Planned Origin Location Code - Affected}),",
				"     column1 = max({Attribution Area Description}),",
				"          column2 = max({Incident Reason Name}),",
				"          {Attributed Cost} = max({Attributed Cost}),",
				"          {Event Datetime} = max({Event Datetime})) ~> aggregate1",
				"select1 filter(rlike({Planned Dest Location Code - Affected}, '66433') && rlike({Planned Dest Location Code - Affected}, '40024')  && rlike({Planned Dest Location Code - Affected}, '63033')  &&rlike({Planned Dest Location Code - Affected}, '59014') && rlike({Planned Dest Location Code - Affected}, '66233')  && rlike({Planned Dest Location Code - Affected}, '43050')  && rlike({Planned Dest Location Code - Affected}, '66395')  && rlike({Planned Dest Location Code - Affected}, '36182') && rlike({Planned Dest Location Code - Affected}, '36153') && rlike({Planned Dest Location Code - Affected}, '66397') && rlike({Planned Dest Location Code - Affected}, '65086') ) ~> filter1",
				"filter1 aggregate(groupBy({Planned Dest Location Code - Affected}),",
				"     {Attribution Area Description} = max({Attribution Area Description}),",
				"          {Incident Reason Name} = max({Incident Reason Name}),",
				"          {Attributed Cost} = max({Attributed Cost}),",
				"          {Event Datetime} = max({Event Datetime})) ~> aggregate2",
				"select1 filter(rlike({Planned Dest Location Code - Affected}, '66433') ) ~> filter66433",
				"select1 filter(rlike({Planned Dest Location Code - Affected}, '40024') ) ~> filter40024",
				"aggregate1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}