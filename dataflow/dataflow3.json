{
	"name": "dataflow3",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesDB",
						"type": "DatasetReference"
					},
					"name": "Movies"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "ComedyFilter"
				},
				{
					"name": "AverageRatingComedy"
				},
				{
					"name": "ActionFilter"
				},
				{
					"name": "AverageRatingAction"
				},
				{
					"name": "lookup1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          RottenTomato as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Movies",
				"Movies filter(toInteger(year) >= 1910 && toInteger(year) <= 2020 && rlike(genres, 'Comedy')) ~> ComedyFilter",
				"ComedyFilter aggregate(groupBy(year),",
				"     AggregateComedyRating = avg(toInteger(Rating)),",
				"          MovieCountComedy = count(1)) ~> AverageRatingComedy",
				"Movies filter(toInteger(year) >= 1910 && toInteger(year) <= 2020 && rlike(genres, 'Action')) ~> ActionFilter",
				"ActionFilter aggregate(groupBy(year),",
				"     AggregateActionRating = avg(toInteger(Rating)),",
				"          MovieCountAction = count(1),",
				"          each(match(type=='double'||type=='integer'||type=='short'||type=='decimal'), $$+'_max' = round(max($$),2))) ~> AverageRatingAction",
				"AverageRatingAction, AverageRatingComedy lookup(AverageRatingAction@year == AverageRatingComedy@year,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1"
			]
		}
	}
}