{
	"name": "2_TransformMovies",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesDB",
						"type": "DatasetReference"
					},
					"name": "MoviesDB"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "MoviesSink",
						"type": "DatasetReference"
					},
					"name": "MoviesSink",
					"rejectedDataLinkedService": {
						"referenceName": "datalakestoragenk",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "filterComedy"
				},
				{
					"name": "AggregateComedyRating"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          RottenTomato as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> MoviesDB",
				"MoviesDB filter(toInteger(year) >= 1910 && toInteger(year) <= 2000 && rlike(genres, 'Comedy')) ~> filterComedy",
				"filterComedy aggregate(groupBy(year),",
				"     AverageComedyRating = avg(toInteger(Rating)),",
				"          MaxRaing = max(toInteger(Rating)),",
				"          MaxRottenTomatoRating = max(toInteger(RottenTomato)),",
				"          Count = count(1)) ~> AggregateComedyRating",
				"AggregateComedyRating sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['MoviesDB Average Ratings'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     mapColumn(",
				"          year,",
				"          AggregateComedyRating = AverageComedyRating,",
				"          Count,",
				"          MaxRaing,",
				"          MaxRottenTomatoRating",
				"     ),",
				"     partitionBy('hash', 1)) ~> MoviesSink"
			]
		}
	}
}