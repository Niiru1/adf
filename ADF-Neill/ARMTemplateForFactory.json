{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-Neill"
		},
		"AzureSqlDatabase1_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'AzureSqlDatabase1'"
		},
		"EmployeeInput_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'EmployeeInput'"
		},
		"datalakestoragenk_accountKey": {
			"type": "secureString",
			"metadata": "Secure string for 'accountKey' of 'datalakestoragenk'"
		},
		"datalakestoragenk_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://datalakestoragenk.dfs.core.windows.net/"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Transform_Movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TransformMovies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TransformMovies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDB": {},
									"MoviesSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/TransformMovies')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_pipeline2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 5
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pl_wait')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait1",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/AreaRoleDataMart')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestoragenk",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "AreaDataMart.csv",
						"folderPath": "data",
						"fileSystem": "testcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AreaRoleId",
						"type": "String"
					},
					{
						"name": "Code",
						"type": "String"
					},
					{
						"name": "Abbreviation",
						"type": "String"
					},
					{
						"name": "Name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestoragenk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AttributionAreaDataMart')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestoragenk",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "AttributionAreaDataMart.csv",
						"folderPath": "data",
						"fileSystem": "testcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "AttributionAreaId",
						"type": "String"
					},
					{
						"name": "Code",
						"type": "String"
					},
					{
						"name": "Description",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestoragenk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Attributions_Raw_Csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestoragenk",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Attributions-2022-07-09-04-16-36-modified.csv",
						"folderPath": "data",
						"fileSystem": "testcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "Incident Category Group",
						"type": "String"
					},
					{
						"name": "Incident Category Group Description",
						"type": "String"
					},
					{
						"name": "Responsible Organisation Full Name",
						"type": "String"
					},
					{
						"name": "Responsible Type",
						"type": "String"
					},
					{
						"name": "Route",
						"type": "String"
					},
					{
						"name": "Route Name",
						"type": "String"
					},
					{
						"name": "Area",
						"type": "String"
					},
					{
						"name": "Area Abbrev",
						"type": "String"
					},
					{
						"name": "Area Name",
						"type": "String"
					},
					{
						"name": "Area Role Abbrev",
						"type": "String"
					},
					{
						"name": "Area Role Name",
						"type": "String"
					},
					{
						"name": "Incident Number",
						"type": "String"
					},
					{
						"name": "Incident Create Date",
						"type": "String"
					},
					{
						"name": "Incident Description",
						"type": "String"
					},
					{
						"name": "Incident Type",
						"type": "String"
					},
					{
						"name": "Incident Start Datetime",
						"type": "String"
					},
					{
						"name": "Incident End Datetime",
						"type": "String"
					},
					{
						"name": "Incident Close Datetime",
						"type": "String"
					},
					{
						"name": "Incident Duration",
						"type": "String"
					},
					{
						"name": "Incident Status",
						"type": "String"
					},
					{
						"name": "Incident New Flag",
						"type": "String"
					},
					{
						"name": "Section Start Code",
						"type": "String"
					},
					{
						"name": "Section End Code",
						"type": "String"
					},
					{
						"name": "Attribution Area Code",
						"type": "String"
					},
					{
						"name": "Attribution Area Description",
						"type": "String"
					},
					{
						"name": "Incident Reason Type Name",
						"type": "String"
					},
					{
						"name": "Incident Category",
						"type": "String"
					},
					{
						"name": "Incident Category Description",
						"type": "String"
					},
					{
						"name": "Incident Reason",
						"type": "String"
					},
					{
						"name": "Incident Reason Name",
						"type": "String"
					},
					{
						"name": "Incident Reason Description",
						"type": "String"
					},
					{
						"name": "Performance Event Group",
						"type": "String"
					},
					{
						"name": "Performance Event Code",
						"type": "String"
					},
					{
						"name": "Performance Event Name",
						"type": "String"
					},
					{
						"name": "Start Stanox",
						"type": "String"
					},
					{
						"name": "End Stanox",
						"type": "String"
					},
					{
						"name": "Operator - Resp",
						"type": "String"
					},
					{
						"name": "Operator Type - Resp",
						"type": "String"
					},
					{
						"name": "Operator Franchised - Resp",
						"type": "String"
					},
					{
						"name": "Operator Holding Company - Resp",
						"type": "String"
					},
					{
						"name": "Operator Name - Resp",
						"type": "String"
					},
					{
						"name": "Operator Full Name - Resp",
						"type": "String"
					},
					{
						"name": "Service Group Type - Resp",
						"type": "String"
					},
					{
						"name": "Service Group Code - Resp",
						"type": "String"
					},
					{
						"name": "Service Group Description - Resp",
						"type": "String"
					},
					{
						"name": "TSC - Resp",
						"type": "String"
					},
					{
						"name": "TSC Description - Resp",
						"type": "String"
					},
					{
						"name": "TSC PfPI Flag - Resp",
						"type": "String"
					},
					{
						"name": "Headcode - Resp",
						"type": "String"
					},
					{
						"name": "Train ID - Resp",
						"type": "String"
					},
					{
						"name": "Punctuality Threshold - Resp",
						"type": "String"
					},
					{
						"name": "Train Service Perf Value - Resp",
						"type": "String"
					},
					{
						"name": "Train Class Code - Resp",
						"type": "String"
					},
					{
						"name": "Train Class Description - Resp",
						"type": "String"
					},
					{
						"name": "Train Class PfPI Flag - Resp",
						"type": "String"
					},
					{
						"name": "Planned Dest Location Code - Resp",
						"type": "String"
					},
					{
						"name": "Planned Origin Location Code - Resp",
						"type": "String"
					},
					{
						"name": "Planned Origin WTT Datetime - Resp",
						"type": "String"
					},
					{
						"name": "Planned Dest GBTT Datetime - Resp",
						"type": "String"
					},
					{
						"name": "Operator Holding Company - Affected",
						"type": "String"
					},
					{
						"name": "Operator Type - Affected",
						"type": "String"
					},
					{
						"name": "Operator - Affected",
						"type": "String"
					},
					{
						"name": "Operator Name - Affected",
						"type": "String"
					},
					{
						"name": "Operator Full Name - Affected",
						"type": "String"
					},
					{
						"name": "Operator Franchised - Affected",
						"type": "String"
					},
					{
						"name": "Service Group Code - Affected",
						"type": "String"
					},
					{
						"name": "Service Group Description - Affected",
						"type": "String"
					},
					{
						"name": "Service Group Type - Affected",
						"type": "String"
					},
					{
						"name": "Punctuality Threshold - Affected",
						"type": "String"
					},
					{
						"name": "TSC - Affected",
						"type": "String"
					},
					{
						"name": "TSC Description - Affected",
						"type": "String"
					},
					{
						"name": "TSC PfPI Flag - Affected",
						"type": "String"
					},
					{
						"name": "Train ID - Affected",
						"type": "String"
					},
					{
						"name": "Train Class Code - Affected",
						"type": "String"
					},
					{
						"name": "Train Class Description - Affected",
						"type": "String"
					},
					{
						"name": "Train Class PfPI Flag - Affected",
						"type": "String"
					},
					{
						"name": "Headcode - Affected",
						"type": "String"
					},
					{
						"name": "Planned Dest Actual Datetime - Affected",
						"type": "String"
					},
					{
						"name": "Planned Dest GBTT Datetime - Affected",
						"type": "String"
					},
					{
						"name": "Planned Dest Location Code - Affected",
						"type": "String"
					},
					{
						"name": "Planned Dest WTT Datetime - Affected",
						"type": "String"
					},
					{
						"name": "Planned Origin Location Code - Affected",
						"type": "String"
					},
					{
						"name": "Planned Origin Actual Datetime - Affected",
						"type": "String"
					},
					{
						"name": "Planned Origin WTT Datetime - Affected",
						"type": "String"
					},
					{
						"name": "Operator Type - React",
						"type": "String"
					},
					{
						"name": "Operator Franchised - React",
						"type": "String"
					},
					{
						"name": "Operator - React",
						"type": "String"
					},
					{
						"name": "Operator Holding Company - React",
						"type": "String"
					},
					{
						"name": "Operator Name - React",
						"type": "String"
					},
					{
						"name": "Operator Full Name - React",
						"type": "String"
					},
					{
						"name": "Train Class Code - React",
						"type": "String"
					},
					{
						"name": "Train Class Description - React",
						"type": "String"
					},
					{
						"name": "Train Class PfPI Flag - React",
						"type": "String"
					},
					{
						"name": "TSC - React",
						"type": "String"
					},
					{
						"name": "TSC Description - React",
						"type": "String"
					},
					{
						"name": "TSC PfPI Flag - React",
						"type": "String"
					},
					{
						"name": "Service Group Type - React",
						"type": "String"
					},
					{
						"name": "Service Group Code - React",
						"type": "String"
					},
					{
						"name": "Service Group Description - React",
						"type": "String"
					},
					{
						"name": "Headcode - React",
						"type": "String"
					},
					{
						"name": "Train ID - React",
						"type": "String"
					},
					{
						"name": "Punctuality Threshold - React",
						"type": "String"
					},
					{
						"name": "Reactionary Category Super Group Name",
						"type": "String"
					},
					{
						"name": "Reactionary Category Group Description",
						"type": "String"
					},
					{
						"name": "Reactionary Category Code",
						"type": "String"
					},
					{
						"name": "Reactionary Category Description",
						"type": "String"
					},
					{
						"name": "Reactionary Reason Code",
						"type": "String"
					},
					{
						"name": "Reactionary Reason Name",
						"type": "String"
					},
					{
						"name": "Reactionary Reason Description",
						"type": "String"
					},
					{
						"name": "PfPI Minutes",
						"type": "String"
					},
					{
						"name": "PfPI Costs",
						"type": "String"
					},
					{
						"name": "Attributed Minutes",
						"type": "String"
					},
					{
						"name": "Attributed Cost",
						"type": "String"
					},
					{
						"name": "Event Datetime",
						"type": "String"
					},
					{
						"name": "Financial Year",
						"type": "String"
					},
					{
						"name": "Financial Period Number",
						"type": "String"
					},
					{
						"name": "Planned Origin WTT Datetime - React",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestoragenk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Attributions_Sink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestoragenk",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "testcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestoragenk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesDB')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestoragenk",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "MoviesDB.csv",
						"folderPath": "data",
						"fileSystem": "testcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "movie",
						"type": "String"
					},
					{
						"name": "title",
						"type": "String"
					},
					{
						"name": "genres",
						"type": "String"
					},
					{
						"name": "year",
						"type": "String"
					},
					{
						"name": "Rating",
						"type": "String"
					},
					{
						"name": "RottenTomato",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestoragenk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/MoviesSink')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestoragenk",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "testcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestoragenk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/AzureSqlDatabase1')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('AzureSqlDatabase1_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/EmployeeInput')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('EmployeeInput_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/datalakestoragenk')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('datalakestoragenk_properties_typeProperties_url')]",
					"accountKey": {
						"type": "SecureString",
						"value": "[parameters('datalakestoragenk_accountKey')]"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Attributions_Area_DataTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Attributions_Raw_Csv",
								"type": "DatasetReference"
							},
							"name": "Raw"
						},
						{
							"dataset": {
								"referenceName": "AreaRoleDataMart",
								"type": "DatasetReference"
							},
							"name": "AreaRoleDataMart"
						},
						{
							"dataset": {
								"referenceName": "AreaRoleDataMart",
								"type": "DatasetReference"
							},
							"name": "AreaCurated"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Attributions_Sink",
								"type": "DatasetReference"
							},
							"name": "CuratedFullArea"
						},
						{
							"dataset": {
								"referenceName": "Attributions_Sink",
								"type": "DatasetReference"
							},
							"name": "CuratedSnapshot"
						}
					],
					"transformations": [
						{
							"name": "FilterEmptyRows"
						},
						{
							"name": "SelectArea"
						},
						{
							"name": "JoinAggregateAreaId"
						},
						{
							"name": "AggregateAreaId"
						},
						{
							"name": "SelectDistinctArea"
						},
						{
							"name": "LookupExisting"
						},
						{
							"name": "FilterOutExisting"
						},
						{
							"name": "SelectFilteredArea"
						},
						{
							"name": "AddSurrogateKey"
						},
						{
							"name": "BaselineSurrogateKey"
						},
						{
							"name": "SelectAreas"
						},
						{
							"name": "UnionExisting"
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Incident Category Group} as string,",
						"          {Incident Category Group Description} as string,",
						"          {Responsible Organisation Full Name} as string,",
						"          {Responsible Type} as string,",
						"          Route as string,",
						"          {Route Name} as string,",
						"          Area as string,",
						"          {Area Abbrev} as string,",
						"          {Area Name} as string,",
						"          {Area Role Abbrev} as string,",
						"          {Area Role Name} as string,",
						"          {Incident Number} as string,",
						"          {Incident Create Date} as string,",
						"          {Incident Description} as string,",
						"          {Incident Type} as string,",
						"          {Incident Start Datetime} as string,",
						"          {Incident End Datetime} as string,",
						"          {Incident Close Datetime} as string,",
						"          {Incident Duration} as string,",
						"          {Incident Status} as string,",
						"          {Incident New Flag} as string,",
						"          {Section Start Code} as string,",
						"          {Section End Code} as string,",
						"          {Attribution Area Code} as string,",
						"          {Attribution Area Description} as string,",
						"          {Incident Reason Type Name} as string,",
						"          {Incident Category} as string,",
						"          {Incident Category Description} as string,",
						"          {Incident Reason} as string,",
						"          {Incident Reason Name} as string,",
						"          {Incident Reason Description} as string,",
						"          {Performance Event Group} as string,",
						"          {Performance Event Code} as string,",
						"          {Performance Event Name} as string,",
						"          {Start Stanox} as string,",
						"          {End Stanox} as string,",
						"          {Operator - Resp} as string,",
						"          {Operator Type - Resp} as string,",
						"          {Operator Franchised - Resp} as string,",
						"          {Operator Holding Company - Resp} as string,",
						"          {Operator Name - Resp} as string,",
						"          {Operator Full Name - Resp} as string,",
						"          {Service Group Type - Resp} as string,",
						"          {Service Group Code - Resp} as string,",
						"          {Service Group Description - Resp} as string,",
						"          {TSC - Resp} as string,",
						"          {TSC Description - Resp} as string,",
						"          {TSC PfPI Flag - Resp} as string,",
						"          {Headcode - Resp} as string,",
						"          {Train ID - Resp} as string,",
						"          {Punctuality Threshold - Resp} as string,",
						"          {Train Service Perf Value - Resp} as string,",
						"          {Train Class Code - Resp} as string,",
						"          {Train Class Description - Resp} as string,",
						"          {Train Class PfPI Flag - Resp} as string,",
						"          {Planned Dest Location Code - Resp} as string,",
						"          {Planned Origin Location Code - Resp} as string,",
						"          {Planned Origin WTT Datetime - Resp} as string,",
						"          {Planned Dest GBTT Datetime - Resp} as string,",
						"          {Operator Holding Company - Affected} as string,",
						"          {Operator Type - Affected} as string,",
						"          {Operator - Affected} as string,",
						"          {Operator Name - Affected} as string,",
						"          {Operator Full Name - Affected} as string,",
						"          {Operator Franchised - Affected} as string,",
						"          {Service Group Code - Affected} as string,",
						"          {Service Group Description - Affected} as string,",
						"          {Service Group Type - Affected} as string,",
						"          {Punctuality Threshold - Affected} as string,",
						"          {TSC - Affected} as string,",
						"          {TSC Description - Affected} as string,",
						"          {TSC PfPI Flag - Affected} as string,",
						"          {Train ID - Affected} as string,",
						"          {Train Class Code - Affected} as string,",
						"          {Train Class Description - Affected} as string,",
						"          {Train Class PfPI Flag - Affected} as string,",
						"          {Headcode - Affected} as string,",
						"          {Planned Dest Actual Datetime - Affected} as string,",
						"          {Planned Dest GBTT Datetime - Affected} as string,",
						"          {Planned Dest Location Code - Affected} as string,",
						"          {Planned Dest WTT Datetime - Affected} as string,",
						"          {Planned Origin Location Code - Affected} as string,",
						"          {Planned Origin Actual Datetime - Affected} as string,",
						"          {Planned Origin WTT Datetime - Affected} as string,",
						"          {Operator Type - React} as string,",
						"          {Operator Franchised - React} as string,",
						"          {Operator - React} as string,",
						"          {Operator Holding Company - React} as string,",
						"          {Operator Name - React} as string,",
						"          {Operator Full Name - React} as string,",
						"          {Train Class Code - React} as string,",
						"          {Train Class Description - React} as string,",
						"          {Train Class PfPI Flag - React} as string,",
						"          {TSC - React} as string,",
						"          {TSC Description - React} as string,",
						"          {TSC PfPI Flag - React} as string,",
						"          {Service Group Type - React} as string,",
						"          {Service Group Code - React} as string,",
						"          {Service Group Description - React} as string,",
						"          {Headcode - React} as string,",
						"          {Train ID - React} as string,",
						"          {Punctuality Threshold - React} as string,",
						"          {Reactionary Category Super Group Name} as string,",
						"          {Reactionary Category Group Description} as string,",
						"          {Reactionary Category Code} as string,",
						"          {Reactionary Category Description} as string,",
						"          {Reactionary Reason Code} as string,",
						"          {Reactionary Reason Name} as string,",
						"          {Reactionary Reason Description} as string,",
						"          {PfPI Minutes} as string,",
						"          {PfPI Costs} as string,",
						"          {Attributed Minutes} as string,",
						"          {Attributed Cost} as string,",
						"          {Event Datetime} as string,",
						"          {Financial Year} as string,",
						"          {Financial Period Number} as string,",
						"          {Planned Origin WTT Datetime - React} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Raw",
						"source(output(",
						"          AreaRoleId as string,",
						"          Code as string,",
						"          Abbreviation as string,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AreaRoleDataMart",
						"source(output(",
						"          AreaRoleId as string,",
						"          Code as string,",
						"          Abbreviation as string,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AreaCurated",
						"Raw filter(!isNull({Event Datetime})) ~> FilterEmptyRows",
						"FilterEmptyRows select(mapColumn(",
						"          Code = Area,",
						"          Abbreviation = {Area Abbrev},",
						"          Name = {Area Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectArea",
						"SelectArea, AggregateAreaId join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinAggregateAreaId",
						"AreaRoleDataMart aggregate(MaxAreaId = toInteger(max(AreaRoleId))) ~> AggregateAreaId",
						"JoinAggregateAreaId aggregate(groupBy(Code),",
						"     MaxAreaId = max(MaxAreaId),",
						"          Abbreviation = max(Abbreviation),",
						"          Name = max(Name)) ~> SelectDistinctArea",
						"SelectDistinctArea, AreaRoleDataMart lookup(SelectDistinctArea@Code == AreaRoleDataMart@Code,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupExisting",
						"LookupExisting filter(isNull(AreaRoleId)) ~> FilterOutExisting",
						"FilterOutExisting select(mapColumn(",
						"          MaxAreaId,",
						"          Code = SelectDistinctArea@Code,",
						"          Abbreviation = SelectDistinctArea@Abbreviation,",
						"          Name = SelectDistinctArea@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFilteredArea",
						"SelectFilteredArea keyGenerate(output(SurrogateKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddSurrogateKey",
						"AddSurrogateKey derive(AreaId = toInteger(SurrogateKey) + toInteger(coalesce(MaxAreaId, 0))) ~> BaselineSurrogateKey",
						"BaselineSurrogateKey select(mapColumn(",
						"          AreaId,",
						"          Code,",
						"          Abbreviation,",
						"          Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectAreas",
						"SelectAreas, AreaCurated union(byName: true)~> UnionExisting",
						"UnionExisting sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CuratedFullArea",
						"SelectAreas sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> CuratedSnapshot"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/Attributions_Raw_Csv')]",
				"[concat(variables('factoryId'), '/datasets/AreaRoleDataMart')]",
				"[concat(variables('factoryId'), '/datasets/Attributions_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/FlowletAttributions_Area_DataTransformation')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "FilterEmptyRows"
						},
						{
							"name": "SelectArea"
						},
						{
							"name": "JoinAggregateAreaId"
						},
						{
							"name": "AggregateAreaId"
						},
						{
							"name": "SelectDistinctArea"
						},
						{
							"name": "LookupExisting"
						},
						{
							"name": "FilterOutExisting"
						},
						{
							"name": "SelectFilteredArea"
						},
						{
							"name": "AddSurrogateKey"
						},
						{
							"name": "BaselineSurrogateKey"
						},
						{
							"name": "Raw"
						},
						{
							"name": "AreaRoleDataMart"
						},
						{
							"name": "AreaCurated"
						},
						{
							"name": "CuratedFullArea"
						},
						{
							"name": "CuratedSnapshot"
						}
					],
					"scriptLines": [
						"input(output(",
						"          {Incident Category Group} as string,",
						"          {Incident Category Group Description} as string,",
						"          {Responsible Organisation Full Name} as string,",
						"          {Responsible Type} as string,",
						"          Route as string,",
						"          {Route Name} as string,",
						"          Area as string,",
						"          {Area Abbrev} as string,",
						"          {Area Name} as string,",
						"          {Area Role Abbrev} as string,",
						"          {Area Role Name} as string,",
						"          {Incident Number} as string,",
						"          {Incident Create Date} as string,",
						"          {Incident Description} as string,",
						"          {Incident Type} as string,",
						"          {Incident Start Datetime} as string,",
						"          {Incident End Datetime} as string,",
						"          {Incident Close Datetime} as string,",
						"          {Incident Duration} as string,",
						"          {Incident Status} as string,",
						"          {Incident New Flag} as string,",
						"          {Section Start Code} as string,",
						"          {Section End Code} as string,",
						"          {Attribution Area Code} as string,",
						"          {Attribution Area Description} as string,",
						"          {Incident Reason Type Name} as string,",
						"          {Incident Category} as string,",
						"          {Incident Category Description} as string,",
						"          {Incident Reason} as string,",
						"          {Incident Reason Name} as string,",
						"          {Incident Reason Description} as string,",
						"          {Performance Event Group} as string,",
						"          {Performance Event Code} as string,",
						"          {Performance Event Name} as string,",
						"          {Start Stanox} as string,",
						"          {End Stanox} as string,",
						"          {Operator - Resp} as string,",
						"          {Operator Type - Resp} as string,",
						"          {Operator Franchised - Resp} as string,",
						"          {Operator Holding Company - Resp} as string,",
						"          {Operator Name - Resp} as string,",
						"          {Operator Full Name - Resp} as string,",
						"          {Service Group Type - Resp} as string,",
						"          {Service Group Code - Resp} as string,",
						"          {Service Group Description - Resp} as string,",
						"          {TSC - Resp} as string,",
						"          {TSC Description - Resp} as string,",
						"          {TSC PfPI Flag - Resp} as string,",
						"          {Headcode - Resp} as string,",
						"          {Train ID - Resp} as string,",
						"          {Punctuality Threshold - Resp} as string,",
						"          {Train Service Perf Value - Resp} as string,",
						"          {Train Class Code - Resp} as string,",
						"          {Train Class Description - Resp} as string,",
						"          {Train Class PfPI Flag - Resp} as string,",
						"          {Planned Dest Location Code - Resp} as string,",
						"          {Planned Origin Location Code - Resp} as string,",
						"          {Planned Origin WTT Datetime - Resp} as string,",
						"          {Planned Dest GBTT Datetime - Resp} as string,",
						"          {Operator Holding Company - Affected} as string,",
						"          {Operator Type - Affected} as string,",
						"          {Operator - Affected} as string,",
						"          {Operator Name - Affected} as string,",
						"          {Operator Full Name - Affected} as string,",
						"          {Operator Franchised - Affected} as string,",
						"          {Service Group Code - Affected} as string,",
						"          {Service Group Description - Affected} as string,",
						"          {Service Group Type - Affected} as string,",
						"          {Punctuality Threshold - Affected} as string,",
						"          {TSC - Affected} as string,",
						"          {TSC Description - Affected} as string,",
						"          {TSC PfPI Flag - Affected} as string,",
						"          {Train ID - Affected} as string,",
						"          {Train Class Code - Affected} as string,",
						"          {Train Class Description - Affected} as string,",
						"          {Train Class PfPI Flag - Affected} as string,",
						"          {Headcode - Affected} as string,",
						"          {Planned Dest Actual Datetime - Affected} as string,",
						"          {Planned Dest GBTT Datetime - Affected} as string,",
						"          {Planned Dest Location Code - Affected} as string,",
						"          {Planned Dest WTT Datetime - Affected} as string,",
						"          {Planned Origin Location Code - Affected} as string,",
						"          {Planned Origin Actual Datetime - Affected} as string,",
						"          {Planned Origin WTT Datetime - Affected} as string,",
						"          {Operator Type - React} as string,",
						"          {Operator Franchised - React} as string,",
						"          {Operator - React} as string,",
						"          {Operator Holding Company - React} as string,",
						"          {Operator Name - React} as string,",
						"          {Operator Full Name - React} as string,",
						"          {Train Class Code - React} as string,",
						"          {Train Class Description - React} as string,",
						"          {Train Class PfPI Flag - React} as string,",
						"          {TSC - React} as string,",
						"          {TSC Description - React} as string,",
						"          {TSC PfPI Flag - React} as string,",
						"          {Service Group Type - React} as string,",
						"          {Service Group Code - React} as string,",
						"          {Service Group Description - React} as string,",
						"          {Headcode - React} as string,",
						"          {Train ID - React} as string,",
						"          {Punctuality Threshold - React} as string,",
						"          {Reactionary Category Super Group Name} as string,",
						"          {Reactionary Category Group Description} as string,",
						"          {Reactionary Category Code} as string,",
						"          {Reactionary Category Description} as string,",
						"          {Reactionary Reason Code} as string,",
						"          {Reactionary Reason Name} as string,",
						"          {Reactionary Reason Description} as string,",
						"          {PfPI Minutes} as string,",
						"          {PfPI Costs} as string,",
						"          {Attributed Minutes} as string,",
						"          {Attributed Cost} as string,",
						"          {Event Datetime} as string,",
						"          {Financial Year} as string,",
						"          {Financial Period Number} as string,",
						"          {Planned Origin WTT Datetime - React} as string",
						"     ),",
						"     order: 0) ~> Raw",
						"input(output(",
						"          AreaRoleId as string,",
						"          Code as string,",
						"          Abbreviation as string,",
						"          Name as string",
						"     ),",
						"     order: 1) ~> AreaRoleDataMart",
						"input(output(",
						"          AreaRoleId as string,",
						"          Code as string,",
						"          Abbreviation as string,",
						"          Name as string",
						"     ),",
						"     order: 2) ~> AreaCurated",
						"Raw filter(!isNull({Event Datetime})) ~> FilterEmptyRows",
						"FilterEmptyRows select(mapColumn(",
						"          Code = Area,",
						"          Abbreviation = {Area Abbrev},",
						"          Name = {Area Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectArea",
						"SelectArea, AggregateAreaId join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinAggregateAreaId",
						"AreaRoleDataMart aggregate(MaxAreaId = toInteger(max(AreaRoleId))) ~> AggregateAreaId",
						"JoinAggregateAreaId aggregate(groupBy(Code),",
						"     MaxAreaId = max(MaxAreaId),",
						"          Abbreviation = max(Abbreviation),",
						"          Name = max(Name)) ~> SelectDistinctArea",
						"SelectDistinctArea, AreaRoleDataMart lookup(SelectDistinctArea@Code == AreaRoleDataMart@Code,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupExisting",
						"LookupExisting filter(isNull(AreaRoleId)) ~> FilterOutExisting",
						"FilterOutExisting select(mapColumn(",
						"          MaxAreaId,",
						"          Code = SelectDistinctArea@Code,",
						"          Abbreviation = SelectDistinctArea@Abbreviation,",
						"          Name = SelectDistinctArea@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFilteredArea",
						"SelectFilteredArea keyGenerate(output(SurrogateKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddSurrogateKey",
						"AddSurrogateKey derive(AreaId = toInteger(SurrogateKey) + toInteger(coalesce(MaxAreaId, 0))) ~> BaselineSurrogateKey",
						"BaselineSurrogateKey output() ~> CuratedFullArea",
						"BaselineSurrogateKey output() ~> CuratedSnapshot"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/FlowletAttributions_Area_DataTransformation1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "FilterEmptyRows"
						},
						{
							"name": "SelectArea"
						},
						{
							"name": "JoinAggregateAreaId"
						},
						{
							"name": "AggregateAreaId"
						},
						{
							"name": "SelectDistinctArea"
						},
						{
							"name": "LookupExisting"
						},
						{
							"name": "FilterOutExisting"
						},
						{
							"name": "SelectFilteredArea"
						},
						{
							"name": "AddSurrogateKey"
						},
						{
							"name": "BaselineSurrogateKey"
						},
						{
							"name": "Raw"
						},
						{
							"name": "AreaRoleDataMart"
						},
						{
							"name": "AreaCurated"
						},
						{
							"name": "CuratedFullArea"
						},
						{
							"name": "CuratedSnapshot"
						}
					],
					"scriptLines": [
						"input(output(",
						"          {Incident Category Group} as string,",
						"          {Incident Category Group Description} as string,",
						"          {Responsible Organisation Full Name} as string,",
						"          {Responsible Type} as string,",
						"          Route as string,",
						"          {Route Name} as string,",
						"          Area as string,",
						"          {Area Abbrev} as string,",
						"          {Area Name} as string,",
						"          {Area Role Abbrev} as string,",
						"          {Area Role Name} as string,",
						"          {Incident Number} as string,",
						"          {Incident Create Date} as string,",
						"          {Incident Description} as string,",
						"          {Incident Type} as string,",
						"          {Incident Start Datetime} as string,",
						"          {Incident End Datetime} as string,",
						"          {Incident Close Datetime} as string,",
						"          {Incident Duration} as string,",
						"          {Incident Status} as string,",
						"          {Incident New Flag} as string,",
						"          {Section Start Code} as string,",
						"          {Section End Code} as string,",
						"          {Attribution Area Code} as string,",
						"          {Attribution Area Description} as string,",
						"          {Incident Reason Type Name} as string,",
						"          {Incident Category} as string,",
						"          {Incident Category Description} as string,",
						"          {Incident Reason} as string,",
						"          {Incident Reason Name} as string,",
						"          {Incident Reason Description} as string,",
						"          {Performance Event Group} as string,",
						"          {Performance Event Code} as string,",
						"          {Performance Event Name} as string,",
						"          {Start Stanox} as string,",
						"          {End Stanox} as string,",
						"          {Operator - Resp} as string,",
						"          {Operator Type - Resp} as string,",
						"          {Operator Franchised - Resp} as string,",
						"          {Operator Holding Company - Resp} as string,",
						"          {Operator Name - Resp} as string,",
						"          {Operator Full Name - Resp} as string,",
						"          {Service Group Type - Resp} as string,",
						"          {Service Group Code - Resp} as string,",
						"          {Service Group Description - Resp} as string,",
						"          {TSC - Resp} as string,",
						"          {TSC Description - Resp} as string,",
						"          {TSC PfPI Flag - Resp} as string,",
						"          {Headcode - Resp} as string,",
						"          {Train ID - Resp} as string,",
						"          {Punctuality Threshold - Resp} as string,",
						"          {Train Service Perf Value - Resp} as string,",
						"          {Train Class Code - Resp} as string,",
						"          {Train Class Description - Resp} as string,",
						"          {Train Class PfPI Flag - Resp} as string,",
						"          {Planned Dest Location Code - Resp} as string,",
						"          {Planned Origin Location Code - Resp} as string,",
						"          {Planned Origin WTT Datetime - Resp} as string,",
						"          {Planned Dest GBTT Datetime - Resp} as string,",
						"          {Operator Holding Company - Affected} as string,",
						"          {Operator Type - Affected} as string,",
						"          {Operator - Affected} as string,",
						"          {Operator Name - Affected} as string,",
						"          {Operator Full Name - Affected} as string,",
						"          {Operator Franchised - Affected} as string,",
						"          {Service Group Code - Affected} as string,",
						"          {Service Group Description - Affected} as string,",
						"          {Service Group Type - Affected} as string,",
						"          {Punctuality Threshold - Affected} as string,",
						"          {TSC - Affected} as string,",
						"          {TSC Description - Affected} as string,",
						"          {TSC PfPI Flag - Affected} as string,",
						"          {Train ID - Affected} as string,",
						"          {Train Class Code - Affected} as string,",
						"          {Train Class Description - Affected} as string,",
						"          {Train Class PfPI Flag - Affected} as string,",
						"          {Headcode - Affected} as string,",
						"          {Planned Dest Actual Datetime - Affected} as string,",
						"          {Planned Dest GBTT Datetime - Affected} as string,",
						"          {Planned Dest Location Code - Affected} as string,",
						"          {Planned Dest WTT Datetime - Affected} as string,",
						"          {Planned Origin Location Code - Affected} as string,",
						"          {Planned Origin Actual Datetime - Affected} as string,",
						"          {Planned Origin WTT Datetime - Affected} as string,",
						"          {Operator Type - React} as string,",
						"          {Operator Franchised - React} as string,",
						"          {Operator - React} as string,",
						"          {Operator Holding Company - React} as string,",
						"          {Operator Name - React} as string,",
						"          {Operator Full Name - React} as string,",
						"          {Train Class Code - React} as string,",
						"          {Train Class Description - React} as string,",
						"          {Train Class PfPI Flag - React} as string,",
						"          {TSC - React} as string,",
						"          {TSC Description - React} as string,",
						"          {TSC PfPI Flag - React} as string,",
						"          {Service Group Type - React} as string,",
						"          {Service Group Code - React} as string,",
						"          {Service Group Description - React} as string,",
						"          {Headcode - React} as string,",
						"          {Train ID - React} as string,",
						"          {Punctuality Threshold - React} as string,",
						"          {Reactionary Category Super Group Name} as string,",
						"          {Reactionary Category Group Description} as string,",
						"          {Reactionary Category Code} as string,",
						"          {Reactionary Category Description} as string,",
						"          {Reactionary Reason Code} as string,",
						"          {Reactionary Reason Name} as string,",
						"          {Reactionary Reason Description} as string,",
						"          {PfPI Minutes} as string,",
						"          {PfPI Costs} as string,",
						"          {Attributed Minutes} as string,",
						"          {Attributed Cost} as string,",
						"          {Event Datetime} as string,",
						"          {Financial Year} as string,",
						"          {Financial Period Number} as string,",
						"          {Planned Origin WTT Datetime - React} as string",
						"     ),",
						"     order: 0) ~> Raw",
						"input(output(",
						"          AreaRoleId as string,",
						"          Code as string,",
						"          Abbreviation as string,",
						"          Name as string",
						"     ),",
						"     order: 1) ~> AreaRoleDataMart",
						"input(output(",
						"          AreaRoleId as string,",
						"          Code as string,",
						"          Abbreviation as string,",
						"          Name as string",
						"     ),",
						"     order: 2) ~> AreaCurated",
						"Raw filter(!isNull({Event Datetime})) ~> FilterEmptyRows",
						"FilterEmptyRows select(mapColumn(",
						"          Code = Area,",
						"          Abbreviation = {Area Abbrev},",
						"          Name = {Area Name}",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectArea",
						"SelectArea, AggregateAreaId join(1==1,",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinAggregateAreaId",
						"AreaRoleDataMart aggregate(MaxAreaId = toInteger(max(AreaRoleId))) ~> AggregateAreaId",
						"JoinAggregateAreaId aggregate(groupBy(Code),",
						"     MaxAreaId = max(MaxAreaId),",
						"          Abbreviation = max(Abbreviation),",
						"          Name = max(Name)) ~> SelectDistinctArea",
						"SelectDistinctArea, AreaRoleDataMart lookup(SelectDistinctArea@Code == AreaRoleDataMart@Code,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupExisting",
						"LookupExisting filter(isNull(AreaRoleId)) ~> FilterOutExisting",
						"FilterOutExisting select(mapColumn(",
						"          MaxAreaId,",
						"          Code = SelectDistinctArea@Code,",
						"          Abbreviation = SelectDistinctArea@Abbreviation,",
						"          Name = SelectDistinctArea@Name",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectFilteredArea",
						"SelectFilteredArea keyGenerate(output(SurrogateKey as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> AddSurrogateKey",
						"AddSurrogateKey derive(AreaId = toInteger(SurrogateKey) + toInteger(coalesce(MaxAreaId, 0))) ~> BaselineSurrogateKey",
						"BaselineSurrogateKey output() ~> CuratedFullArea",
						"BaselineSurrogateKey output() ~> CuratedSnapshot"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/TransformMovies')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "MoviesDB"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesSink",
								"type": "DatasetReference"
							},
							"name": "MoviesSink",
							"rejectedDataLinkedService": {
								"referenceName": "datalakestoragenk",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "filter1"
						},
						{
							"name": "AggregateComedyRating"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          RottenTomato as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> MoviesDB",
						"MoviesDB filter(toInteger(year) >= 1910 && toInteger(year) <= 2000 && rlike(genres, 'Comedy')) ~> filter1",
						"filter1 aggregate(groupBy(year),",
						"     AggregateComedyRating = avg(toInteger(Rating))) ~> AggregateComedyRating",
						"AggregateComedyRating sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['MoviesDB Average Ratings'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          year,",
						"          AggregateComedyRating",
						"     ),",
						"     partitionBy('hash', 1)) ~> MoviesSink"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/MoviesSink')]",
				"[concat(variables('factoryId'), '/linkedServices/datalakestoragenk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "Movies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "MoreAggs"
						},
						{
							"name": "SelectCopy"
						},
						{
							"name": "ValueDistAgg"
						},
						{
							"name": "UniqDist"
						},
						{
							"name": "SummaryStats"
						},
						{
							"name": "Join1"
						},
						{
							"name": "DerivedColumn1"
						},
						{
							"name": "alterRow1"
						},
						{
							"name": "RowCount"
						},
						{
							"name": "DistinctRows"
						},
						{
							"name": "LookForNULLs"
						},
						{
							"name": "DerivedColumn"
						},
						{
							"name": "SurrogateKey"
						},
						{
							"name": "Window1"
						},
						{
							"name": "KeyPatternDistinctCountAllCol"
						},
						{
							"name": "SurrogateKey1"
						},
						{
							"name": "DerivedColumn3"
						},
						{
							"name": "leadAndLag"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          RottenTomato as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Movies",
						"Movies select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> MoreAggs",
						"MoreAggs select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectCopy",
						"SelectCopy aggregate(groupBy(title),",
						"     countunique = count()) ~> ValueDistAgg",
						"ValueDistAgg aggregate(numofunique = countIf(countunique==1),",
						"          numofdistinct = countDistinct(title)) ~> UniqDist",
						"Movies aggregate(each(match(true()), $$+'_NotNull' = countIf(!isNull($$)), $$+'_Null' = countIf(!isNull($$))),",
						"          each(match(type=='double'||type=='integer'||type=='short'||type=='decimal'), $$+'_stddev' = round(stddev($$),2), $$+'_min' = min($$), $$+'_max' = max($$), $$+'_average' = round(avg($$),2), $$+'_variance' = round(variance($$),2)),",
						"          each(match(type=='string'), $$+'_maxLength' = max(length($$)))) ~> SummaryStats",
						"SummaryStats, UniqDist join((movie_NotNull-movie_NotNull) == (numofunique-numofunique),",
						"     joinType:'cross',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> Join1",
						"UniqDist derive(DWhash = sha1(numofunique,numofdistinct)) ~> DerivedColumn1",
						"Movies alterRow(upsertIf(true())) ~> alterRow1",
						"alterRow1 aggregate(updates = countIf(isUpdate(), 1),",
						"          inserts = countIf(isInsert(), 1),",
						"          upserts = countIf(isUpsert(), 1),",
						"          deletes = countIf(isDelete(),1)) ~> RowCount",
						"Movies aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> DistinctRows",
						"Movies split(contains(array(toString(columns())),isNull(#item)),",
						"     disjoint: false) ~> LookForNULLs@(hasNULLs, noNULLs)",
						"Movies derive(dummy = 1) ~> DerivedColumn",
						"DerivedColumn keyGenerate(output(sk as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SurrogateKey",
						"SurrogateKey window(over(dummy),",
						"     asc(sk, true),",
						"     Rating2 = coalesce(Rating, last(Rating, true()))) ~> Window1",
						"Window1 aggregate(each(match(true()), $$ = countDistinct($$))) ~> KeyPatternDistinctCountAllCol",
						"Window1 keyGenerate(output(sk as long),",
						"     startAt: 1L,",
						"     stepValue: 1L) ~> SurrogateKey1",
						"SurrogateKey1 derive(dummy = 1) ~> DerivedColumn3",
						"DerivedColumn3 window(over(dummy),",
						"     asc(sk, true),",
						"     prevAndCurr = lag(title,1)+'-'+last(title),",
						"          nextAndCurr = lead(title,1)+'-'+last(title)) ~> leadAndLag",
						"leadAndLag sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/MoviesSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Attributions_Raw_Csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AreaRoleDataMart",
								"type": "DatasetReference"
							},
							"name": "AreaRoleDataMart"
						},
						{
							"dataset": {
								"referenceName": "AreaRoleDataMart",
								"type": "DatasetReference"
							},
							"name": "AreaCurated"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Attributions_Sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "FlowletAttributions_Area_DataTransformation",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Incident Category Group} as string,",
						"          {Incident Category Group Description} as string,",
						"          {Responsible Organisation Full Name} as string,",
						"          {Responsible Type} as string,",
						"          Route as string,",
						"          {Route Name} as string,",
						"          Area as string,",
						"          {Area Abbrev} as string,",
						"          {Area Name} as string,",
						"          {Area Role Abbrev} as string,",
						"          {Area Role Name} as string,",
						"          {Incident Number} as string,",
						"          {Incident Create Date} as string,",
						"          {Incident Description} as string,",
						"          {Incident Type} as string,",
						"          {Incident Start Datetime} as string,",
						"          {Incident End Datetime} as string,",
						"          {Incident Close Datetime} as string,",
						"          {Incident Duration} as string,",
						"          {Incident Status} as string,",
						"          {Incident New Flag} as string,",
						"          {Section Start Code} as string,",
						"          {Section End Code} as string,",
						"          {Attribution Area Code} as string,",
						"          {Attribution Area Description} as string,",
						"          {Incident Reason Type Name} as string,",
						"          {Incident Category} as string,",
						"          {Incident Category Description} as string,",
						"          {Incident Reason} as string,",
						"          {Incident Reason Name} as string,",
						"          {Incident Reason Description} as string,",
						"          {Performance Event Group} as string,",
						"          {Performance Event Code} as string,",
						"          {Performance Event Name} as string,",
						"          {Start Stanox} as string,",
						"          {End Stanox} as string,",
						"          {Operator - Resp} as string,",
						"          {Operator Type - Resp} as string,",
						"          {Operator Franchised - Resp} as string,",
						"          {Operator Holding Company - Resp} as string,",
						"          {Operator Name - Resp} as string,",
						"          {Operator Full Name - Resp} as string,",
						"          {Service Group Type - Resp} as string,",
						"          {Service Group Code - Resp} as string,",
						"          {Service Group Description - Resp} as string,",
						"          {TSC - Resp} as string,",
						"          {TSC Description - Resp} as string,",
						"          {TSC PfPI Flag - Resp} as string,",
						"          {Headcode - Resp} as string,",
						"          {Train ID - Resp} as string,",
						"          {Punctuality Threshold - Resp} as string,",
						"          {Train Service Perf Value - Resp} as string,",
						"          {Train Class Code - Resp} as string,",
						"          {Train Class Description - Resp} as string,",
						"          {Train Class PfPI Flag - Resp} as string,",
						"          {Planned Dest Location Code - Resp} as string,",
						"          {Planned Origin Location Code - Resp} as string,",
						"          {Planned Origin WTT Datetime - Resp} as string,",
						"          {Planned Dest GBTT Datetime - Resp} as string,",
						"          {Operator Holding Company - Affected} as string,",
						"          {Operator Type - Affected} as string,",
						"          {Operator - Affected} as string,",
						"          {Operator Name - Affected} as string,",
						"          {Operator Full Name - Affected} as string,",
						"          {Operator Franchised - Affected} as string,",
						"          {Service Group Code - Affected} as string,",
						"          {Service Group Description - Affected} as string,",
						"          {Service Group Type - Affected} as string,",
						"          {Punctuality Threshold - Affected} as string,",
						"          {TSC - Affected} as string,",
						"          {TSC Description - Affected} as string,",
						"          {TSC PfPI Flag - Affected} as string,",
						"          {Train ID - Affected} as string,",
						"          {Train Class Code - Affected} as string,",
						"          {Train Class Description - Affected} as string,",
						"          {Train Class PfPI Flag - Affected} as string,",
						"          {Headcode - Affected} as string,",
						"          {Planned Dest Actual Datetime - Affected} as string,",
						"          {Planned Dest GBTT Datetime - Affected} as string,",
						"          {Planned Dest Location Code - Affected} as string,",
						"          {Planned Dest WTT Datetime - Affected} as string,",
						"          {Planned Origin Location Code - Affected} as string,",
						"          {Planned Origin Actual Datetime - Affected} as string,",
						"          {Planned Origin WTT Datetime - Affected} as string,",
						"          {Operator Type - React} as string,",
						"          {Operator Franchised - React} as string,",
						"          {Operator - React} as string,",
						"          {Operator Holding Company - React} as string,",
						"          {Operator Name - React} as string,",
						"          {Operator Full Name - React} as string,",
						"          {Train Class Code - React} as string,",
						"          {Train Class Description - React} as string,",
						"          {Train Class PfPI Flag - React} as string,",
						"          {TSC - React} as string,",
						"          {TSC Description - React} as string,",
						"          {TSC PfPI Flag - React} as string,",
						"          {Service Group Type - React} as string,",
						"          {Service Group Code - React} as string,",
						"          {Service Group Description - React} as string,",
						"          {Headcode - React} as string,",
						"          {Train ID - React} as string,",
						"          {Punctuality Threshold - React} as string,",
						"          {Reactionary Category Super Group Name} as string,",
						"          {Reactionary Category Group Description} as string,",
						"          {Reactionary Category Code} as string,",
						"          {Reactionary Category Description} as string,",
						"          {Reactionary Reason Code} as string,",
						"          {Reactionary Reason Name} as string,",
						"          {Reactionary Reason Description} as string,",
						"          {PfPI Minutes} as string,",
						"          {PfPI Costs} as string,",
						"          {Attributed Minutes} as string,",
						"          {Attributed Cost} as string,",
						"          {Event Datetime} as string,",
						"          {Financial Year} as string,",
						"          {Financial Period Number} as string,",
						"          {Planned Origin WTT Datetime - React} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          AreaRoleId as string,",
						"          Code as string,",
						"          Abbreviation as string,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AreaRoleDataMart",
						"source(output(",
						"          AreaRoleId as string,",
						"          Code as string,",
						"          Abbreviation as string,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AreaCurated",
						"source1, AreaRoleDataMart, AreaRoleDataMart compose(mapColumn(",
						"          {Incident Category Group},",
						"          {Incident Category Group Description},",
						"          {Responsible Organisation Full Name},",
						"          {Responsible Type},",
						"          Route,",
						"          {Route Name},",
						"          Area,",
						"          {Area Abbrev},",
						"          {Area Name},",
						"          {Area Role Abbrev},",
						"          {Area Role Name},",
						"          {Incident Number},",
						"          {Incident Create Date},",
						"          {Incident Description},",
						"          {Incident Type},",
						"          {Incident Start Datetime},",
						"          {Incident End Datetime},",
						"          {Incident Close Datetime},",
						"          {Incident Duration},",
						"          {Incident Status},",
						"          {Incident New Flag},",
						"          {Section Start Code},",
						"          {Section End Code},",
						"          {Attribution Area Code},",
						"          {Attribution Area Description},",
						"          {Incident Reason Type Name},",
						"          {Incident Category},",
						"          {Incident Category Description},",
						"          {Incident Reason},",
						"          {Incident Reason Name},",
						"          {Incident Reason Description},",
						"          {Performance Event Group},",
						"          {Performance Event Code},",
						"          {Performance Event Name},",
						"          {Start Stanox},",
						"          {End Stanox},",
						"          {Operator - Resp},",
						"          {Operator Type - Resp},",
						"          {Operator Franchised - Resp},",
						"          {Operator Holding Company - Resp},",
						"          {Operator Name - Resp},",
						"          {Operator Full Name - Resp},",
						"          {Service Group Type - Resp},",
						"          {Service Group Code - Resp},",
						"          {Service Group Description - Resp},",
						"          {TSC - Resp},",
						"          {TSC Description - Resp},",
						"          {TSC PfPI Flag - Resp},",
						"          {Headcode - Resp},",
						"          {Train ID - Resp},",
						"          {Punctuality Threshold - Resp},",
						"          {Train Service Perf Value - Resp},",
						"          {Train Class Code - Resp},",
						"          {Train Class Description - Resp},",
						"          {Train Class PfPI Flag - Resp},",
						"          {Planned Dest Location Code - Resp},",
						"          {Planned Origin Location Code - Resp},",
						"          {Planned Origin WTT Datetime - Resp},",
						"          {Planned Dest GBTT Datetime - Resp},",
						"          {Operator Holding Company - Affected},",
						"          {Operator Type - Affected},",
						"          {Operator - Affected},",
						"          {Operator Name - Affected},",
						"          {Operator Full Name - Affected},",
						"          {Operator Franchised - Affected},",
						"          {Service Group Code - Affected},",
						"          {Service Group Description - Affected},",
						"          {Service Group Type - Affected},",
						"          {Punctuality Threshold - Affected},",
						"          {TSC - Affected},",
						"          {TSC Description - Affected},",
						"          {TSC PfPI Flag - Affected},",
						"          {Train ID - Affected},",
						"          {Train Class Code - Affected},",
						"          {Train Class Description - Affected},",
						"          {Train Class PfPI Flag - Affected},",
						"          {Headcode - Affected},",
						"          {Planned Dest Actual Datetime - Affected},",
						"          {Planned Dest GBTT Datetime - Affected},",
						"          {Planned Dest Location Code - Affected},",
						"          {Planned Dest WTT Datetime - Affected},",
						"          {Planned Origin Location Code - Affected},",
						"          {Planned Origin Actual Datetime - Affected},",
						"          {Planned Origin WTT Datetime - Affected},",
						"          {Operator Type - React},",
						"          {Operator Franchised - React},",
						"          {Operator - React},",
						"          {Operator Holding Company - React},",
						"          {Operator Name - React},",
						"          {Operator Full Name - React},",
						"          {Train Class Code - React},",
						"          {Train Class Description - React},",
						"          {Train Class PfPI Flag - React},",
						"          {TSC - React},",
						"          {TSC Description - React},",
						"          {TSC PfPI Flag - React},",
						"          {Service Group Type - React},",
						"          {Service Group Code - React},",
						"          {Service Group Description - React},",
						"          {Headcode - React},",
						"          {Train ID - React},",
						"          {Punctuality Threshold - React},",
						"          {Reactionary Category Super Group Name},",
						"          {Reactionary Category Group Description},",
						"          {Reactionary Category Code},",
						"          {Reactionary Category Description},",
						"          {Reactionary Reason Code},",
						"          {Reactionary Reason Name},",
						"          {Reactionary Reason Description},",
						"          {PfPI Minutes},",
						"          {PfPI Costs},",
						"          {Attributed Minutes},",
						"          {Attributed Cost},",
						"          {Event Datetime},",
						"          {Financial Year},",
						"          {Financial Period Number},",
						"          {Planned Origin WTT Datetime - React}",
						"     ),mapColumn(",
						"          AreaRoleId = {Incident Category Group},",
						"          Code = {Incident Category Group},",
						"          Abbreviation = {Incident Category Group},",
						"          Name = {Incident Category Group}",
						"     ),mapColumn(",
						"          AreaRoleId = {Incident Category Group},",
						"          Code = {Incident Category Group},",
						"          Abbreviation = {Incident Category Group},",
						"          Name = {Incident Category Group}",
						"     ),",
						"     composition: 'FlowletAttributions_Area_DataTransformation') ~> flowlet1@(CuratedFullArea, CuratedSnapshot)",
						"flowlet1@CuratedSnapshot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DataTransformationFlowlet.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          MaxAreaId,",
						"          Code,",
						"          Abbreviation,",
						"          Name,",
						"          SurrogateKey,",
						"          AreaId",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/FlowletAttributions_Area_DataTransformation')]",
				"[concat(variables('factoryId'), '/datasets/Attributions_Raw_Csv')]",
				"[concat(variables('factoryId'), '/datasets/AreaRoleDataMart')]",
				"[concat(variables('factoryId'), '/datasets/Attributions_Sink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_dedupe')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "Movies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DistinctRows"
						},
						{
							"name": "OrignalData"
						},
						{
							"name": "DistinctAllCols"
						},
						{
							"name": "FuzzyMatch"
						},
						{
							"name": "RowCountFuzzy"
						},
						{
							"name": "RowCountAll"
						},
						{
							"name": "RowCountOrig"
						},
						{
							"name": "RowCountDistinct"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          RottenTomato as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Movies",
						"Movies aggregate(groupBy(movie),",
						"     each(match(name!='movie'), $$ = first($$))) ~> DistinctRows",
						"Movies select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> OrignalData",
						"Movies aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> DistinctAllCols",
						"Movies aggregate(groupBy(colsfuzzy = sha2(256,movie,year,soundex(title))),",
						"     each(match(true()), $$ = first($$))) ~> FuzzyMatch",
						"FuzzyMatch aggregate(rowcount_fuzzy = count(1)) ~> RowCountFuzzy",
						"DistinctAllCols aggregate(rowcount_all = count(1)) ~> RowCountAll",
						"OrignalData aggregate(rowcount_orig = count(1)) ~> RowCountOrig",
						"DistinctRows aggregate(rowcount_agg = count(1)) ~> RowCountDistinct",
						"DistinctRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/MoviesDB')]",
				"[concat(variables('factoryId'), '/datasets/MoviesSink')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_Employees')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employees",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp",
						"emp aggregate(groupBy(id,",
						"          name,",
						"          gender),",
						"     count = count()) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/employees')]",
				"[concat(variables('factoryId'), '/datasets/outputFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/employees')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestoragenk",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "Emplolyees.csv",
						"folderPath": "data",
						"fileSystem": "testcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					},
					{
						"name": "gender",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestoragenk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/outputFolder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestoragenk",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"folderPath": "output",
						"fileSystem": "testcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestoragenk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_Department')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "departments",
								"type": "DatasetReference"
							},
							"name": "dep"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dep",
						"dep aggregate(groupBy(id,",
						"          name),",
						"     count = count()) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DepartmentOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DepartmentOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/departments')]",
				"[concat(variables('factoryId'), '/datasets/outputFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/departments')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "datalakestoragenk",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": "departments.csv",
						"folderPath": "data",
						"fileSystem": "testcontainer"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id",
						"type": "String"
					},
					{
						"name": "name",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/datalakestoragenk')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_Flowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Flowlet",
				"typeProperties": {
					"sources": [],
					"sinks": [],
					"transformations": [
						{
							"name": "aggregate1"
						},
						{
							"name": "select1"
						},
						{
							"name": "input1"
						},
						{
							"name": "output1"
						}
					],
					"scriptLines": [
						"input(output(",
						"          id as string,",
						"          name as string,",
						"          gender as string",
						"     ),",
						"     order: 0) ~> input1",
						"input1 aggregate(groupBy(id,",
						"          name,",
						"          gender),",
						"     count = count()) ~> aggregate1",
						"aggregate1 select(mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 output() ~> output1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_ExecEmployeesFlowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employees",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "1_Flowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp",
						"emp compose(mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     composition: '1_Flowlet') ~> flowlet1@(output1)",
						"flowlet1@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ExecFlowletOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/1_Flowlet')]",
				"[concat(variables('factoryId'), '/datasets/employees')]",
				"[concat(variables('factoryId'), '/datasets/outputFolder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_ExecDepartmentsFlowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "departments",
								"type": "DatasetReference"
							},
							"name": "dep"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "1_Flowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dep",
						"derivedColumn1 compose(mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     composition: '1_Flowlet') ~> flowlet1@(output1)",
						"dep derive(gender = 'dummy') ~> derivedColumn1",
						"flowlet1@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     )) ~> sink1",
						"flowlet1@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/1_Flowlet')]",
				"[concat(variables('factoryId'), '/datasets/departments')]",
				"[concat(variables('factoryId'), '/datasets/outputFolder')]"
			]
		}
	]
}