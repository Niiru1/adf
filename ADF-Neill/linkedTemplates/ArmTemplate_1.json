{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "ADF-Neill"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/dataflow2')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Attributions_Raw_Csv",
								"type": "DatasetReference"
							},
							"name": "source1"
						},
						{
							"dataset": {
								"referenceName": "AreaRoleDataMart",
								"type": "DatasetReference"
							},
							"name": "AreaRoleDataMart"
						},
						{
							"dataset": {
								"referenceName": "AreaRoleDataMart",
								"type": "DatasetReference"
							},
							"name": "AreaCurated"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Attributions_Sink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "FlowletAttributions_Area_DataTransformation",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(output(",
						"          {Incident Category Group} as string,",
						"          {Incident Category Group Description} as string,",
						"          {Responsible Organisation Full Name} as string,",
						"          {Responsible Type} as string,",
						"          Route as string,",
						"          {Route Name} as string,",
						"          Area as string,",
						"          {Area Abbrev} as string,",
						"          {Area Name} as string,",
						"          {Area Role Abbrev} as string,",
						"          {Area Role Name} as string,",
						"          {Incident Number} as string,",
						"          {Incident Create Date} as string,",
						"          {Incident Description} as string,",
						"          {Incident Type} as string,",
						"          {Incident Start Datetime} as string,",
						"          {Incident End Datetime} as string,",
						"          {Incident Close Datetime} as string,",
						"          {Incident Duration} as string,",
						"          {Incident Status} as string,",
						"          {Incident New Flag} as string,",
						"          {Section Start Code} as string,",
						"          {Section End Code} as string,",
						"          {Attribution Area Code} as string,",
						"          {Attribution Area Description} as string,",
						"          {Incident Reason Type Name} as string,",
						"          {Incident Category} as string,",
						"          {Incident Category Description} as string,",
						"          {Incident Reason} as string,",
						"          {Incident Reason Name} as string,",
						"          {Incident Reason Description} as string,",
						"          {Performance Event Group} as string,",
						"          {Performance Event Code} as string,",
						"          {Performance Event Name} as string,",
						"          {Start Stanox} as string,",
						"          {End Stanox} as string,",
						"          {Operator - Resp} as string,",
						"          {Operator Type - Resp} as string,",
						"          {Operator Franchised - Resp} as string,",
						"          {Operator Holding Company - Resp} as string,",
						"          {Operator Name - Resp} as string,",
						"          {Operator Full Name - Resp} as string,",
						"          {Service Group Type - Resp} as string,",
						"          {Service Group Code - Resp} as string,",
						"          {Service Group Description - Resp} as string,",
						"          {TSC - Resp} as string,",
						"          {TSC Description - Resp} as string,",
						"          {TSC PfPI Flag - Resp} as string,",
						"          {Headcode - Resp} as string,",
						"          {Train ID - Resp} as string,",
						"          {Punctuality Threshold - Resp} as string,",
						"          {Train Service Perf Value - Resp} as string,",
						"          {Train Class Code - Resp} as string,",
						"          {Train Class Description - Resp} as string,",
						"          {Train Class PfPI Flag - Resp} as string,",
						"          {Planned Dest Location Code - Resp} as string,",
						"          {Planned Origin Location Code - Resp} as string,",
						"          {Planned Origin WTT Datetime - Resp} as string,",
						"          {Planned Dest GBTT Datetime - Resp} as string,",
						"          {Operator Holding Company - Affected} as string,",
						"          {Operator Type - Affected} as string,",
						"          {Operator - Affected} as string,",
						"          {Operator Name - Affected} as string,",
						"          {Operator Full Name - Affected} as string,",
						"          {Operator Franchised - Affected} as string,",
						"          {Service Group Code - Affected} as string,",
						"          {Service Group Description - Affected} as string,",
						"          {Service Group Type - Affected} as string,",
						"          {Punctuality Threshold - Affected} as string,",
						"          {TSC - Affected} as string,",
						"          {TSC Description - Affected} as string,",
						"          {TSC PfPI Flag - Affected} as string,",
						"          {Train ID - Affected} as string,",
						"          {Train Class Code - Affected} as string,",
						"          {Train Class Description - Affected} as string,",
						"          {Train Class PfPI Flag - Affected} as string,",
						"          {Headcode - Affected} as string,",
						"          {Planned Dest Actual Datetime - Affected} as string,",
						"          {Planned Dest GBTT Datetime - Affected} as string,",
						"          {Planned Dest Location Code - Affected} as string,",
						"          {Planned Dest WTT Datetime - Affected} as string,",
						"          {Planned Origin Location Code - Affected} as string,",
						"          {Planned Origin Actual Datetime - Affected} as string,",
						"          {Planned Origin WTT Datetime - Affected} as string,",
						"          {Operator Type - React} as string,",
						"          {Operator Franchised - React} as string,",
						"          {Operator - React} as string,",
						"          {Operator Holding Company - React} as string,",
						"          {Operator Name - React} as string,",
						"          {Operator Full Name - React} as string,",
						"          {Train Class Code - React} as string,",
						"          {Train Class Description - React} as string,",
						"          {Train Class PfPI Flag - React} as string,",
						"          {TSC - React} as string,",
						"          {TSC Description - React} as string,",
						"          {TSC PfPI Flag - React} as string,",
						"          {Service Group Type - React} as string,",
						"          {Service Group Code - React} as string,",
						"          {Service Group Description - React} as string,",
						"          {Headcode - React} as string,",
						"          {Train ID - React} as string,",
						"          {Punctuality Threshold - React} as string,",
						"          {Reactionary Category Super Group Name} as string,",
						"          {Reactionary Category Group Description} as string,",
						"          {Reactionary Category Code} as string,",
						"          {Reactionary Category Description} as string,",
						"          {Reactionary Reason Code} as string,",
						"          {Reactionary Reason Name} as string,",
						"          {Reactionary Reason Description} as string,",
						"          {PfPI Minutes} as string,",
						"          {PfPI Costs} as string,",
						"          {Attributed Minutes} as string,",
						"          {Attributed Cost} as string,",
						"          {Event Datetime} as string,",
						"          {Financial Year} as string,",
						"          {Financial Period Number} as string,",
						"          {Planned Origin WTT Datetime - React} as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> source1",
						"source(output(",
						"          AreaRoleId as string,",
						"          Code as string,",
						"          Abbreviation as string,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AreaRoleDataMart",
						"source(output(",
						"          AreaRoleId as string,",
						"          Code as string,",
						"          Abbreviation as string,",
						"          Name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AreaCurated",
						"source1, AreaRoleDataMart, AreaRoleDataMart compose(mapColumn(",
						"          {Incident Category Group},",
						"          {Incident Category Group Description},",
						"          {Responsible Organisation Full Name},",
						"          {Responsible Type},",
						"          Route,",
						"          {Route Name},",
						"          Area,",
						"          {Area Abbrev},",
						"          {Area Name},",
						"          {Area Role Abbrev},",
						"          {Area Role Name},",
						"          {Incident Number},",
						"          {Incident Create Date},",
						"          {Incident Description},",
						"          {Incident Type},",
						"          {Incident Start Datetime},",
						"          {Incident End Datetime},",
						"          {Incident Close Datetime},",
						"          {Incident Duration},",
						"          {Incident Status},",
						"          {Incident New Flag},",
						"          {Section Start Code},",
						"          {Section End Code},",
						"          {Attribution Area Code},",
						"          {Attribution Area Description},",
						"          {Incident Reason Type Name},",
						"          {Incident Category},",
						"          {Incident Category Description},",
						"          {Incident Reason},",
						"          {Incident Reason Name},",
						"          {Incident Reason Description},",
						"          {Performance Event Group},",
						"          {Performance Event Code},",
						"          {Performance Event Name},",
						"          {Start Stanox},",
						"          {End Stanox},",
						"          {Operator - Resp},",
						"          {Operator Type - Resp},",
						"          {Operator Franchised - Resp},",
						"          {Operator Holding Company - Resp},",
						"          {Operator Name - Resp},",
						"          {Operator Full Name - Resp},",
						"          {Service Group Type - Resp},",
						"          {Service Group Code - Resp},",
						"          {Service Group Description - Resp},",
						"          {TSC - Resp},",
						"          {TSC Description - Resp},",
						"          {TSC PfPI Flag - Resp},",
						"          {Headcode - Resp},",
						"          {Train ID - Resp},",
						"          {Punctuality Threshold - Resp},",
						"          {Train Service Perf Value - Resp},",
						"          {Train Class Code - Resp},",
						"          {Train Class Description - Resp},",
						"          {Train Class PfPI Flag - Resp},",
						"          {Planned Dest Location Code - Resp},",
						"          {Planned Origin Location Code - Resp},",
						"          {Planned Origin WTT Datetime - Resp},",
						"          {Planned Dest GBTT Datetime - Resp},",
						"          {Operator Holding Company - Affected},",
						"          {Operator Type - Affected},",
						"          {Operator - Affected},",
						"          {Operator Name - Affected},",
						"          {Operator Full Name - Affected},",
						"          {Operator Franchised - Affected},",
						"          {Service Group Code - Affected},",
						"          {Service Group Description - Affected},",
						"          {Service Group Type - Affected},",
						"          {Punctuality Threshold - Affected},",
						"          {TSC - Affected},",
						"          {TSC Description - Affected},",
						"          {TSC PfPI Flag - Affected},",
						"          {Train ID - Affected},",
						"          {Train Class Code - Affected},",
						"          {Train Class Description - Affected},",
						"          {Train Class PfPI Flag - Affected},",
						"          {Headcode - Affected},",
						"          {Planned Dest Actual Datetime - Affected},",
						"          {Planned Dest GBTT Datetime - Affected},",
						"          {Planned Dest Location Code - Affected},",
						"          {Planned Dest WTT Datetime - Affected},",
						"          {Planned Origin Location Code - Affected},",
						"          {Planned Origin Actual Datetime - Affected},",
						"          {Planned Origin WTT Datetime - Affected},",
						"          {Operator Type - React},",
						"          {Operator Franchised - React},",
						"          {Operator - React},",
						"          {Operator Holding Company - React},",
						"          {Operator Name - React},",
						"          {Operator Full Name - React},",
						"          {Train Class Code - React},",
						"          {Train Class Description - React},",
						"          {Train Class PfPI Flag - React},",
						"          {TSC - React},",
						"          {TSC Description - React},",
						"          {TSC PfPI Flag - React},",
						"          {Service Group Type - React},",
						"          {Service Group Code - React},",
						"          {Service Group Description - React},",
						"          {Headcode - React},",
						"          {Train ID - React},",
						"          {Punctuality Threshold - React},",
						"          {Reactionary Category Super Group Name},",
						"          {Reactionary Category Group Description},",
						"          {Reactionary Category Code},",
						"          {Reactionary Category Description},",
						"          {Reactionary Reason Code},",
						"          {Reactionary Reason Name},",
						"          {Reactionary Reason Description},",
						"          {PfPI Minutes},",
						"          {PfPI Costs},",
						"          {Attributed Minutes},",
						"          {Attributed Cost},",
						"          {Event Datetime},",
						"          {Financial Year},",
						"          {Financial Period Number},",
						"          {Planned Origin WTT Datetime - React}",
						"     ),mapColumn(",
						"          AreaRoleId = {Incident Category Group},",
						"          Code = {Incident Category Group},",
						"          Abbreviation = {Incident Category Group},",
						"          Name = {Incident Category Group}",
						"     ),mapColumn(",
						"          AreaRoleId = {Incident Category Group},",
						"          Code = {Incident Category Group},",
						"          Abbreviation = {Incident Category Group},",
						"          Name = {Incident Category Group}",
						"     ),",
						"     composition: 'FlowletAttributions_Area_DataTransformation') ~> flowlet1@(CuratedFullArea, CuratedSnapshot)",
						"flowlet1@CuratedSnapshot sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DataTransformationFlowlet.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          MaxAreaId,",
						"          Code,",
						"          Abbreviation,",
						"          Name,",
						"          SurrogateKey,",
						"          AreaId",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_dedupe')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "MoviesDB",
								"type": "DatasetReference"
							},
							"name": "Movies"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "MoviesSink",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "DistinctRows"
						},
						{
							"name": "OrignalData"
						},
						{
							"name": "DistinctAllCols"
						},
						{
							"name": "FuzzyMatch"
						},
						{
							"name": "RowCountFuzzy"
						},
						{
							"name": "RowCountAll"
						},
						{
							"name": "RowCountOrig"
						},
						{
							"name": "RowCountDistinct"
						}
					],
					"scriptLines": [
						"source(output(",
						"          movie as string,",
						"          title as string,",
						"          genres as string,",
						"          year as string,",
						"          Rating as string,",
						"          RottenTomato as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Movies",
						"Movies aggregate(groupBy(movie),",
						"     each(match(name!='movie'), $$ = first($$))) ~> DistinctRows",
						"Movies select(mapColumn(",
						"          movie,",
						"          title,",
						"          genres,",
						"          year,",
						"          Rating,",
						"          RottenTomato",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> OrignalData",
						"Movies aggregate(groupBy(mycols = sha2(256,columns())),",
						"     each(match(true()), $$ = first($$))) ~> DistinctAllCols",
						"Movies aggregate(groupBy(colsfuzzy = sha2(256,movie,year,soundex(title))),",
						"     each(match(true()), $$ = first($$))) ~> FuzzyMatch",
						"FuzzyMatch aggregate(rowcount_fuzzy = count(1)) ~> RowCountFuzzy",
						"DistinctAllCols aggregate(rowcount_all = count(1)) ~> RowCountAll",
						"OrignalData aggregate(rowcount_orig = count(1)) ~> RowCountOrig",
						"DistinctRows aggregate(rowcount_agg = count(1)) ~> RowCountDistinct",
						"DistinctRows sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_Employees')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employees",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp",
						"emp aggregate(groupBy(id,",
						"          name,",
						"          gender),",
						"     count = count()) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['EmployeesOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_Department')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "departments",
								"type": "DatasetReference"
							},
							"name": "dep"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "aggregate1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dep",
						"dep aggregate(groupBy(id,",
						"          name),",
						"     count = count()) ~> aggregate1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DepartmentOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sink1",
						"aggregate1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['DepartmentOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_ExecEmployeesFlowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "employees",
								"type": "DatasetReference"
							},
							"name": "emp"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "1_Flowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string,",
						"          gender as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> emp",
						"emp compose(mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     composition: '1_Flowlet') ~> flowlet1@(output1)",
						"flowlet1@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ExecFlowletOutput.csv'],",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     partitionBy('hash', 1)) ~> sink1"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/1_ExecDepartmentsFlowlet')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "departments",
								"type": "DatasetReference"
							},
							"name": "dep"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink1"
						},
						{
							"dataset": {
								"referenceName": "outputFolder",
								"type": "DatasetReference"
							},
							"name": "sink2"
						}
					],
					"transformations": [
						{
							"name": "flowlet1",
							"flowlet": {
								"referenceName": "1_Flowlet",
								"type": "DataFlowReference",
								"parameters": {}
							}
						},
						{
							"name": "derivedColumn1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id as string,",
						"          name as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> dep",
						"derivedColumn1 compose(mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     ),",
						"     composition: '1_Flowlet') ~> flowlet1@(output1)",
						"dep derive(gender = 'dummy') ~> derivedColumn1",
						"flowlet1@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name,",
						"          gender",
						"     )) ~> sink1",
						"flowlet1@output1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     umask: 0022,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          id,",
						"          name",
						"     )) ~> sink2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transform_Movies')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "TransformMovies",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "1.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "TransformMovies",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"MoviesDB": {},
									"MoviesSink": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"annotations": []
			},
			"dependsOn": []
		}
	]
}